{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\n\n/**\r\n * Hook customizado para gerenciar formulários\r\n * @param {Object} initialValues - Valores iniciais do formulário\r\n * @param {Function} onSubmit - Função chamada ao submeter o formulário\r\n * @param {Object} validationRules - Regras de validação para cada campo\r\n * @returns {Object} - Estado e funções do formulário\r\n */\nconst useForm = (initialValues = {}, onSubmit, validationRules = {}) => {\n  _s();\n  const [formData, setFormData] = useState(initialValues);\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  // Função para validar um campo específico\n  const validateField = useCallback((name, value) => {\n    const rules = validationRules[name];\n    if (!rules) return '';\n\n    // Validação obrigatória\n    if (rules.required && (!value || value.trim() === '')) {\n      return `${rules.required}`;\n    }\n\n    // Validação de email\n    if (rules.email && value) {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(value)) {\n        return 'Por favor, insira um email válido';\n      }\n    }\n\n    // Validação de telefone\n    if (rules.phone && value) {\n      const phoneRegex = /^\\(\\d{2}\\)\\s\\d{4,5}-\\d{4}$/;\n      if (!phoneRegex.test(value)) {\n        return 'Por favor, insira um telefone válido (ex: (11) 99999-9999)';\n      }\n    }\n\n    // Validação de tamanho mínimo\n    if (rules.minLength && value && value.length < rules.minLength) {\n      return `Mínimo de ${rules.minLength} caracteres`;\n    }\n\n    // Validação de tamanho máximo\n    if (rules.maxLength && value && value.length > rules.maxLength) {\n      return `Máximo de ${rules.maxLength} caracteres`;\n    }\n\n    // Validação customizada\n    if (rules.custom && typeof rules.custom === 'function') {\n      const customError = rules.custom(value);\n      if (customError) {\n        return customError;\n      }\n    }\n    return '';\n  }, [validationRules]);\n\n  // Função para validar todo o formulário\n  const validateForm = useCallback(() => {\n    const newErrors = {};\n    let isValid = true;\n    Object.keys(validationRules).forEach(fieldName => {\n      const error = validateField(fieldName, formData[fieldName]);\n      if (error) {\n        newErrors[fieldName] = error;\n        isValid = false;\n      }\n    });\n    setErrors(newErrors);\n    return isValid;\n  }, [formData, validateField, validationRules]);\n\n  // Função para atualizar um campo\n  const handleChange = useCallback(e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n\n    // Validação em tempo real (opcional)\n    if (errors[name]) {\n      const error = validateField(name, value);\n      setErrors(prev => ({\n        ...prev,\n        [name]: error\n      }));\n    }\n  }, [errors, validateField]);\n\n  // Função para submeter o formulário\n  const handleSubmit = useCallback(async e => {\n    e.preventDefault();\n    if (!validateForm()) {\n      return;\n    }\n    setIsSubmitting(true);\n    setErrors({});\n    try {\n      if (onSubmit && typeof onSubmit === 'function') {\n        await onSubmit(formData);\n        setIsSubmitted(true);\n      }\n    } catch (error) {\n      console.error('Erro ao submeter formulário:', error);\n      setErrors({\n        submit: error.message || 'Erro ao enviar formulário. Tente novamente.'\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [formData, validateForm, onSubmit]);\n\n  // Função para resetar o formulário\n  const resetForm = useCallback(() => {\n    setFormData(initialValues);\n    setErrors({});\n    setIsSubmitting(false);\n    setIsSubmitted(false);\n  }, [initialValues]);\n\n  // Função para definir um erro manualmente\n  const setFieldError = useCallback((fieldName, error) => {\n    setErrors(prev => ({\n      ...prev,\n      [fieldName]: error\n    }));\n  }, []);\n\n  // Função para limpar um erro específico\n  const clearFieldError = useCallback(fieldName => {\n    setErrors(prev => {\n      const newErrors = {\n        ...prev\n      };\n      delete newErrors[fieldName];\n      return newErrors;\n    });\n  }, []);\n  return {\n    formData,\n    errors,\n    isSubmitting,\n    isSubmitted,\n    handleChange,\n    handleSubmit,\n    resetForm,\n    setFieldError,\n    clearFieldError,\n    validateField,\n    validateForm\n  };\n};\n_s(useForm, \"jIFzfTEaw7q80zwC/cBa1YD9zMw=\");\nexport default useForm;","map":{"version":3,"names":["useState","useCallback","useForm","initialValues","onSubmit","validationRules","_s","formData","setFormData","errors","setErrors","isSubmitting","setIsSubmitting","isSubmitted","setIsSubmitted","validateField","name","value","rules","required","trim","email","emailRegex","test","phone","phoneRegex","minLength","length","maxLength","custom","customError","validateForm","newErrors","isValid","Object","keys","forEach","fieldName","error","handleChange","e","target","prev","handleSubmit","preventDefault","console","submit","message","resetForm","setFieldError","clearFieldError"],"sources":["C:/Users/Doit/Desktop/azuton_lp/src/hooks/useForm.js"],"sourcesContent":["import { useState, useCallback } from 'react';\r\n\r\n/**\r\n * Hook customizado para gerenciar formulários\r\n * @param {Object} initialValues - Valores iniciais do formulário\r\n * @param {Function} onSubmit - Função chamada ao submeter o formulário\r\n * @param {Object} validationRules - Regras de validação para cada campo\r\n * @returns {Object} - Estado e funções do formulário\r\n */\r\nconst useForm = (initialValues = {}, onSubmit, validationRules = {}) => {\r\n  const [formData, setFormData] = useState(initialValues);\r\n  const [errors, setErrors] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n\r\n  // Função para validar um campo específico\r\n  const validateField = useCallback((name, value) => {\r\n    const rules = validationRules[name];\r\n    if (!rules) return '';\r\n\r\n    // Validação obrigatória\r\n    if (rules.required && (!value || value.trim() === '')) {\r\n      return `${rules.required}`;\r\n    }\r\n\r\n    // Validação de email\r\n    if (rules.email && value) {\r\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      if (!emailRegex.test(value)) {\r\n        return 'Por favor, insira um email válido';\r\n      }\r\n    }\r\n\r\n    // Validação de telefone\r\n    if (rules.phone && value) {\r\n      const phoneRegex = /^\\(\\d{2}\\)\\s\\d{4,5}-\\d{4}$/;\r\n      if (!phoneRegex.test(value)) {\r\n        return 'Por favor, insira um telefone válido (ex: (11) 99999-9999)';\r\n      }\r\n    }\r\n\r\n    // Validação de tamanho mínimo\r\n    if (rules.minLength && value && value.length < rules.minLength) {\r\n      return `Mínimo de ${rules.minLength} caracteres`;\r\n    }\r\n\r\n    // Validação de tamanho máximo\r\n    if (rules.maxLength && value && value.length > rules.maxLength) {\r\n      return `Máximo de ${rules.maxLength} caracteres`;\r\n    }\r\n\r\n    // Validação customizada\r\n    if (rules.custom && typeof rules.custom === 'function') {\r\n      const customError = rules.custom(value);\r\n      if (customError) {\r\n        return customError;\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }, [validationRules]);\r\n\r\n  // Função para validar todo o formulário\r\n  const validateForm = useCallback(() => {\r\n    const newErrors = {};\r\n    let isValid = true;\r\n\r\n    Object.keys(validationRules).forEach(fieldName => {\r\n      const error = validateField(fieldName, formData[fieldName]);\r\n      if (error) {\r\n        newErrors[fieldName] = error;\r\n        isValid = false;\r\n      }\r\n    });\r\n\r\n    setErrors(newErrors);\r\n    return isValid;\r\n  }, [formData, validateField, validationRules]);\r\n\r\n  // Função para atualizar um campo\r\n  const handleChange = useCallback((e) => {\r\n    const { name, value } = e.target;\r\n    \r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n\r\n    // Validação em tempo real (opcional)\r\n    if (errors[name]) {\r\n      const error = validateField(name, value);\r\n      setErrors(prev => ({\r\n        ...prev,\r\n        [name]: error\r\n      }));\r\n    }\r\n  }, [errors, validateField]);\r\n\r\n  // Função para submeter o formulário\r\n  const handleSubmit = useCallback(async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n    setErrors({});\r\n\r\n    try {\r\n      if (onSubmit && typeof onSubmit === 'function') {\r\n        await onSubmit(formData);\r\n        setIsSubmitted(true);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao submeter formulário:', error);\r\n      setErrors({ \r\n        submit: error.message || 'Erro ao enviar formulário. Tente novamente.' \r\n      });\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  }, [formData, validateForm, onSubmit]);\r\n\r\n  // Função para resetar o formulário\r\n  const resetForm = useCallback(() => {\r\n    setFormData(initialValues);\r\n    setErrors({});\r\n    setIsSubmitting(false);\r\n    setIsSubmitted(false);\r\n  }, [initialValues]);\r\n\r\n  // Função para definir um erro manualmente\r\n  const setFieldError = useCallback((fieldName, error) => {\r\n    setErrors(prev => ({\r\n      ...prev,\r\n      [fieldName]: error\r\n    }));\r\n  }, []);\r\n\r\n  // Função para limpar um erro específico\r\n  const clearFieldError = useCallback((fieldName) => {\r\n    setErrors(prev => {\r\n      const newErrors = { ...prev };\r\n      delete newErrors[fieldName];\r\n      return newErrors;\r\n    });\r\n  }, []);\r\n\r\n  return {\r\n    formData,\r\n    errors,\r\n    isSubmitting,\r\n    isSubmitted,\r\n    handleChange,\r\n    handleSubmit,\r\n    resetForm,\r\n    setFieldError,\r\n    clearFieldError,\r\n    validateField,\r\n    validateForm\r\n  };\r\n};\r\n\r\nexport default useForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}